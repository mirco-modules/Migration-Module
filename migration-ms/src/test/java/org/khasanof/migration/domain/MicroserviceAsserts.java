package org.khasanof.migration.domain;

import org.khasanof.migration.domain.common.Microservice;

import static org.assertj.core.api.Assertions.assertThat;

public class MicroserviceAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMicroserviceAllPropertiesEquals(Microservice expected, Microservice actual) {
        assertMicroserviceAutoGeneratedPropertiesEquals(expected, actual);
        assertMicroserviceAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMicroserviceAllUpdatablePropertiesEquals(Microservice expected, Microservice actual) {
        assertMicroserviceUpdatableFieldsEquals(expected, actual);
        assertMicroserviceUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMicroserviceAutoGeneratedPropertiesEquals(Microservice expected, Microservice actual) {
        assertThat(expected)
            .as("Verify Microservice auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMicroserviceUpdatableFieldsEquals(Microservice expected, Microservice actual) {
        assertThat(expected)
            .as("Verify Microservice relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getVersion()).as("check version").isEqualTo(actual.getVersion()))
            .satisfies(e -> assertThat(e.getUpdated()).as("check updated").isEqualTo(actual.getUpdated()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMicroserviceUpdatableRelationshipsEquals(Microservice expected, Microservice actual) {}
}
