package org.khasanof.migration.domain;

import org.khasanof.migration.domain.common.Changelog;

import static org.assertj.core.api.Assertions.assertThat;

public class ChangelogAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChangelogAllPropertiesEquals(Changelog expected, Changelog actual) {
        assertChangelogAutoGeneratedPropertiesEquals(expected, actual);
        assertChangelogAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChangelogAllUpdatablePropertiesEquals(Changelog expected, Changelog actual) {
        assertChangelogUpdatableFieldsEquals(expected, actual);
        assertChangelogUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChangelogAutoGeneratedPropertiesEquals(Changelog expected, Changelog actual) {
        assertThat(expected)
            .as("Verify Changelog auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChangelogUpdatableFieldsEquals(Changelog expected, Changelog actual) {
        assertThat(expected)
            .as("Verify Changelog relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getOriginalName()).as("check originalName").isEqualTo(actual.getOriginalName()))
            .satisfies(e -> assertThat(e.getPath()).as("check path").isEqualTo(actual.getPath()))
            .satisfies(e -> assertThat(e.getFilesize()).as("check filesize").isEqualTo(actual.getFilesize()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChangelogUpdatableRelationshipsEquals(Changelog expected, Changelog actual) {
        assertThat(expected)
            .as("Verify Changelog relationships")
            .satisfies(e -> assertThat(e.getMicroservice()).as("check microservice").isEqualTo(actual.getMicroservice()));
    }
}
